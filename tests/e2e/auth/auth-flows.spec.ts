/**
 * Authentication Flows E2E Tests
 * 
 * Comprehensive end-to-end testing for all authentication flows in the
 * iPEC Coach Connect platform. Tests complete user journeys across
 * different browsers and devices.
 * 
 * Test Coverage:
 * - User registration (email/password + Google OAuth)
 * - Login/logout flows with session persistence
 * - Password reset and recovery workflows
 * - Profile creation and management
 * - Coach application and verification
 * - Role-based navigation and access control
 * - Cross-device session handling
 * - Error scenarios and recovery
 */

import { test, expect, Page, BrowserContext } from '@playwright/test';\n\n// Test data and utilities\nconst TEST_USERS = {\n  NEW_CLIENT: {\n    email: `test.client.${Date.now()}@example.com`,\n    password: 'SecureTestPassword123!',\n    fullName: 'Test Client User',\n    phone: '+1-555-0123',\n  },\n  NEW_COACH: {\n    email: `test.coach.${Date.now()}@example.com`,\n    password: 'SecureCoachPassword123!',\n    fullName: 'Test Coach User',\n    phone: '+1-555-0124',\n  },\n  EXISTING_USER: {\n    email: 'existing.user@example.com',\n    password: 'ExistingPassword123!',\n  },\n};\n\nconst COACH_APPLICATION_DATA = {\n  certificationNumber: 'IPEC-TEST-12345',\n  certificationLevel: 'Professional',\n  certificationDate: '2020-06-15',\n  specializations: ['Life Coaching', 'Career Coaching'],\n  hourlyRate: '150',\n  experienceYears: '5',\n  languages: 'English',\n  bio: 'Experienced iPEC certified coach passionate about helping others achieve their potential.',\n};\n\n// Helper functions\nclass AuthTestHelpers {\n  static async fillRegistrationForm(page: Page, userData: typeof TEST_USERS.NEW_CLIENT) {\n    await page.fill('[data-testid=\"registration-email\"]', userData.email);\n    await page.fill('[data-testid=\"registration-password\"]', userData.password);\n    await page.fill('[data-testid=\"registration-full-name\"]', userData.fullName);\n    await page.fill('[data-testid=\"registration-phone\"]', userData.phone);\n  }\n\n  static async fillLoginForm(page: Page, email: string, password: string) {\n    await page.fill('[data-testid=\"login-email\"]', email);\n    await page.fill('[data-testid=\"login-password\"]', password);\n  }\n\n  static async waitForAuthRedirect(page: Page, expectedPath: string = '/dashboard') {\n    await page.waitForURL(`**${expectedPath}`, { timeout: 10000 });\n  }\n\n  static async assertUserIsLoggedIn(page: Page, userName?: string) {\n    // Wait for user menu or dashboard to appear\n    await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n    \n    if (userName) {\n      await expect(page.locator('[data-testid=\"user-name\"]')).toContainText(userName);\n    }\n  }\n\n  static async assertUserIsLoggedOut(page: Page) {\n    // Should redirect to login or home page\n    await expect(page.locator('[data-testid=\"login-form\"]')).toBeVisible();\n    \n    // User menu should not be visible\n    await expect(page.locator('[data-testid=\"user-menu\"]')).not.toBeVisible();\n  }\n\n  static async navigateToRegistration(page: Page) {\n    await page.goto('/auth/register');\n    await expect(page.locator('[data-testid=\"registration-form\"]')).toBeVisible();\n  }\n\n  static async navigateToLogin(page: Page) {\n    await page.goto('/auth/login');\n    await expect(page.locator('[data-testid=\"login-form\"]')).toBeVisible();\n  }\n\n  static async logout(page: Page) {\n    await page.click('[data-testid=\"user-menu\"]');\n    await page.click('[data-testid=\"logout-button\"]');\n    await this.assertUserIsLoggedOut(page);\n  }\n}\n\ntest.describe('Authentication Flows', () => {\n  test.describe('User Registration', () => {\n    test('should register new client user successfully', async ({ page }) => {\n      await AuthTestHelpers.navigateToRegistration(page);\n      \n      // Fill registration form\n      await AuthTestHelpers.fillRegistrationForm(page, TEST_USERS.NEW_CLIENT);\n      \n      // Select client role\n      await page.click('[data-testid=\"role-client\"]');\n      \n      // Submit registration\n      await page.click('[data-testid=\"register-submit\"]');\n      \n      // Should show email verification message\n      await expect(page.locator('[data-testid=\"email-verification-message\"]'))\n        .toContainText('Please check your email');\n      \n      // In test environment, skip email verification\n      if (process.env.NODE_ENV === 'test') {\n        await page.goto('/auth/verify?token=test-token&type=signup');\n      }\n      \n      // Should redirect to onboarding or dashboard\n      await AuthTestHelpers.waitForAuthRedirect(page, '/onboarding');\n      await AuthTestHelpers.assertUserIsLoggedIn(page, TEST_USERS.NEW_CLIENT.fullName);\n    });\n\n    test('should register new coach user successfully', async ({ page }) => {\n      await AuthTestHelpers.navigateToRegistration(page);\n      \n      await AuthTestHelpers.fillRegistrationForm(page, TEST_USERS.NEW_COACH);\n      \n      // Select coach role\n      await page.click('[data-testid=\"role-coach\"]');\n      \n      await page.click('[data-testid=\"register-submit\"]');\n      \n      // Should show email verification\n      await expect(page.locator('[data-testid=\"email-verification-message\"]'))\n        .toBeVisible();\n      \n      // Skip verification in test\n      if (process.env.NODE_ENV === 'test') {\n        await page.goto('/auth/verify?token=test-token&type=signup');\n      }\n      \n      // Should redirect to coach onboarding\n      await AuthTestHelpers.waitForAuthRedirect(page, '/onboarding/coach');\n      await AuthTestHelpers.assertUserIsLoggedIn(page, TEST_USERS.NEW_COACH.fullName);\n    });\n\n    test('should handle duplicate email registration', async ({ page }) => {\n      await AuthTestHelpers.navigateToRegistration(page);\n      \n      // Use existing user email\n      await AuthTestHelpers.fillRegistrationForm(page, {\n        ...TEST_USERS.NEW_CLIENT,\n        email: TEST_USERS.EXISTING_USER.email\n      });\n      \n      await page.click('[data-testid=\"role-client\"]');\n      await page.click('[data-testid=\"register-submit\"]');\n      \n      // Should show error message\n      await expect(page.locator('[data-testid=\"error-message\"]'))\n        .toContainText(/already registered|already exists/i);\n    });\n\n    test('should validate password requirements', async ({ page }) => {\n      await AuthTestHelpers.navigateToRegistration(page);\n      \n      // Try weak password\n      await page.fill('[data-testid=\"registration-email\"]', 'test@example.com');\n      await page.fill('[data-testid=\"registration-password\"]', '123');\n      \n      // Should show password requirements\n      await expect(page.locator('[data-testid=\"password-requirements\"]'))\n        .toBeVisible();\n      \n      // Submit button should be disabled\n      await expect(page.locator('[data-testid=\"register-submit\"]'))\n        .toBeDisabled();\n    });\n\n    test('should validate email format', async ({ page }) => {\n      await AuthTestHelpers.navigateToRegistration(page);\n      \n      await page.fill('[data-testid=\"registration-email\"]', 'invalid-email');\n      await page.fill('[data-testid=\"registration-password\"]', 'ValidPassword123!');\n      \n      // Should show email format error\n      await expect(page.locator('[data-testid=\"email-error\"]'))\n        .toContainText(/invalid email/i);\n    });\n  });\n\n  test.describe('User Login', () => {\n    test('should login with valid credentials', async ({ page }) => {\n      await AuthTestHelpers.navigateToLogin(page);\n      \n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      \n      await page.click('[data-testid=\"login-submit\"]');\n      \n      await AuthTestHelpers.waitForAuthRedirect(page);\n      await AuthTestHelpers.assertUserIsLoggedIn(page);\n    });\n\n    test('should reject invalid credentials', async ({ page }) => {\n      await AuthTestHelpers.navigateToLogin(page);\n      \n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        'wrong-password'\n      );\n      \n      await page.click('[data-testid=\"login-submit\"]');\n      \n      // Should show error message\n      await expect(page.locator('[data-testid=\"error-message\"]'))\n        .toContainText(/invalid credentials|incorrect password/i);\n      \n      // Should remain on login page\n      await expect(page.locator('[data-testid=\"login-form\"]')).toBeVisible();\n    });\n\n    test('should handle non-existent user', async ({ page }) => {\n      await AuthTestHelpers.navigateToLogin(page);\n      \n      await AuthTestHelpers.fillLoginForm(\n        page, \n        'nonexistent@example.com', \n        'password123'\n      );\n      \n      await page.click('[data-testid=\"login-submit\"]');\n      \n      await expect(page.locator('[data-testid=\"error-message\"]'))\n        .toContainText(/invalid credentials|user not found/i);\n    });\n\n    test('should show loading state during login', async ({ page }) => {\n      await AuthTestHelpers.navigateToLogin(page);\n      \n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      \n      // Click submit and immediately check loading state\n      await page.click('[data-testid=\"login-submit\"]');\n      \n      // Should show loading indicator\n      await expect(page.locator('[data-testid=\"login-loading\"]')).toBeVisible();\n      \n      // Submit button should be disabled\n      await expect(page.locator('[data-testid=\"login-submit\"]')).toBeDisabled();\n    });\n  });\n\n  test.describe('Google OAuth Authentication', () => {\n    test('should initiate Google OAuth flow', async ({ page }) => {\n      await AuthTestHelpers.navigateToLogin(page);\n      \n      // Mock Google OAuth in test environment\n      if (process.env.NODE_ENV === 'test') {\n        await page.route('**/auth/v1/authorize**', route => {\n          route.fulfill({\n            status: 302,\n            headers: {\n              Location: '/auth/callback?code=test-auth-code&state=test-state'\n            }\n          });\n        });\n      }\n      \n      await page.click('[data-testid=\"google-login-button\"]');\n      \n      // Should either redirect to Google or handle mock response\n      if (process.env.NODE_ENV === 'test') {\n        await AuthTestHelpers.waitForAuthRedirect(page);\n        await AuthTestHelpers.assertUserIsLoggedIn(page);\n      } else {\n        // Should redirect to Google OAuth\n        await page.waitForURL('**/accounts.google.com/**');\n      }\n    });\n\n    test('should handle OAuth callback success', async ({ page }) => {\n      // Simulate successful OAuth callback\n      await page.goto('/auth/callback?code=test-code&state=test-state');\n      \n      // Should process callback and redirect\n      await AuthTestHelpers.waitForAuthRedirect(page);\n      await AuthTestHelpers.assertUserIsLoggedIn(page);\n    });\n\n    test('should handle OAuth callback error', async ({ page }) => {\n      // Simulate OAuth error\n      await page.goto('/auth/callback?error=access_denied&error_description=User+denied+access');\n      \n      // Should show error and redirect to login\n      await expect(page.locator('[data-testid=\"oauth-error\"]'))\n        .toContainText(/access denied|oauth error/i);\n      \n      await page.waitForURL('**/auth/login');\n    });\n  });\n\n  test.describe('Password Reset Flow', () => {\n    test('should request password reset', async ({ page }) => {\n      await AuthTestHelpers.navigateToLogin(page);\n      \n      await page.click('[data-testid=\"forgot-password-link\"]');\n      \n      // Should navigate to password reset page\n      await expect(page.locator('[data-testid=\"password-reset-form\"]')).toBeVisible();\n      \n      await page.fill('[data-testid=\"reset-email\"]', TEST_USERS.EXISTING_USER.email);\n      await page.click('[data-testid=\"reset-submit\"]');\n      \n      // Should show confirmation message\n      await expect(page.locator('[data-testid=\"reset-confirmation\"]'))\n        .toContainText(/check your email|reset link sent/i);\n    });\n\n    test('should handle password reset with new password', async ({ page }) => {\n      // Simulate password reset link\n      await page.goto('/auth/reset-password?token=test-reset-token');\n      \n      await expect(page.locator('[data-testid=\"new-password-form\"]')).toBeVisible();\n      \n      const newPassword = 'NewSecurePassword123!';\n      await page.fill('[data-testid=\"new-password\"]', newPassword);\n      await page.fill('[data-testid=\"confirm-password\"]', newPassword);\n      \n      await page.click('[data-testid=\"update-password-submit\"]');\n      \n      // Should show success and redirect to login\n      await expect(page.locator('[data-testid=\"password-updated\"]'))\n        .toContainText(/password updated|successfully updated/i);\n      \n      await page.waitForURL('**/auth/login');\n    });\n\n    test('should validate password confirmation match', async ({ page }) => {\n      await page.goto('/auth/reset-password?token=test-reset-token');\n      \n      await page.fill('[data-testid=\"new-password\"]', 'NewPassword123!');\n      await page.fill('[data-testid=\"confirm-password\"]', 'DifferentPassword123!');\n      \n      // Should show error\n      await expect(page.locator('[data-testid=\"password-mismatch-error\"]'))\n        .toContainText(/passwords do not match/i);\n      \n      await expect(page.locator('[data-testid=\"update-password-submit\"]'))\n        .toBeDisabled();\n    });\n  });\n\n  test.describe('Session Management', () => {\n    test('should persist session across page refreshes', async ({ page }) => {\n      // Login first\n      await AuthTestHelpers.navigateToLogin(page);\n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page.click('[data-testid=\"login-submit\"]');\n      await AuthTestHelpers.waitForAuthRedirect(page);\n      \n      // Refresh page\n      await page.reload();\n      \n      // Should remain logged in\n      await AuthTestHelpers.assertUserIsLoggedIn(page);\n    });\n\n    test('should handle session expiry gracefully', async ({ page }) => {\n      // This would require backend simulation of expired tokens\n      // For now, test the frontend handling\n      \n      await AuthTestHelpers.navigateToLogin(page);\n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page.click('[data-testid=\"login-submit\"]');\n      await AuthTestHelpers.waitForAuthRedirect(page);\n      \n      // Clear storage to simulate session loss\n      await page.evaluate(() => {\n        localStorage.clear();\n        sessionStorage.clear();\n      });\n      \n      // Navigate to protected route\n      await page.goto('/dashboard/profile');\n      \n      // Should redirect to login\n      await page.waitForURL('**/auth/login');\n      await AuthTestHelpers.assertUserIsLoggedOut(page);\n    });\n\n    test('should logout successfully', async ({ page }) => {\n      // Login first\n      await AuthTestHelpers.navigateToLogin(page);\n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page.click('[data-testid=\"login-submit\"]');\n      await AuthTestHelpers.waitForAuthRedirect(page);\n      \n      // Logout\n      await AuthTestHelpers.logout(page);\n      \n      // Verify logout\n      await AuthTestHelpers.assertUserIsLoggedOut(page);\n      \n      // Should not be able to access protected routes\n      await page.goto('/dashboard');\n      await page.waitForURL('**/auth/login');\n    });\n  });\n\n  test.describe('Profile Management', () => {\n    test('should complete profile setup after registration', async ({ page }) => {\n      // Assume user is logged in and on onboarding page\n      await page.goto('/onboarding');\n      \n      // Fill profile information\n      await page.fill('[data-testid=\"profile-bio\"]', 'I am passionate about personal development.');\n      await page.fill('[data-testid=\"profile-location\"]', 'New York, NY');\n      await page.selectOption('[data-testid=\"profile-timezone\"]', 'America/New_York');\n      \n      await page.click('[data-testid=\"complete-profile\"]');\n      \n      // Should redirect to dashboard\n      await AuthTestHelpers.waitForAuthRedirect(page, '/dashboard');\n    });\n\n    test('should update profile information', async ({ page }) => {\n      // Navigate to profile settings\n      await page.goto('/dashboard/profile');\n      \n      const updatedName = 'Updated User Name';\n      const updatedBio = 'Updated bio information';\n      \n      await page.fill('[data-testid=\"profile-name\"]', updatedName);\n      await page.fill('[data-testid=\"profile-bio\"]', updatedBio);\n      \n      await page.click('[data-testid=\"save-profile\"]');\n      \n      // Should show success message\n      await expect(page.locator('[data-testid=\"profile-updated\"]'))\n        .toContainText(/profile updated|successfully updated/i);\n      \n      // Verify changes persisted\n      await page.reload();\n      await expect(page.locator('[data-testid=\"profile-name\"]')).toHaveValue(updatedName);\n      await expect(page.locator('[data-testid=\"profile-bio\"]')).toHaveValue(updatedBio);\n    });\n  });\n\n  test.describe('Coach Application Flow', () => {\n    test('should complete coach application successfully', async ({ page }) => {\n      // Assume logged in as potential coach\n      await page.goto('/become-coach');\n      \n      // Fill coach application form\n      await page.fill('[data-testid=\"certification-number\"]', COACH_APPLICATION_DATA.certificationNumber);\n      await page.selectOption('[data-testid=\"certification-level\"]', COACH_APPLICATION_DATA.certificationLevel);\n      await page.fill('[data-testid=\"certification-date\"]', COACH_APPLICATION_DATA.certificationDate);\n      \n      // Select specializations\n      for (const specialization of COACH_APPLICATION_DATA.specializations) {\n        await page.check(`[data-testid=\"specialization-${specialization.toLowerCase().replace(' ', '-')}\"]`);\n      }\n      \n      await page.fill('[data-testid=\"hourly-rate\"]', COACH_APPLICATION_DATA.hourlyRate);\n      await page.fill('[data-testid=\"experience-years\"]', COACH_APPLICATION_DATA.experienceYears);\n      await page.fill('[data-testid=\"languages\"]', COACH_APPLICATION_DATA.languages);\n      await page.fill('[data-testid=\"coach-bio\"]', COACH_APPLICATION_DATA.bio);\n      \n      await page.click('[data-testid=\"submit-application\"]');\n      \n      // Should show application submitted message\n      await expect(page.locator('[data-testid=\"application-submitted\"]'))\n        .toContainText(/application submitted|under review/i);\n      \n      // Should redirect to pending verification page\n      await page.waitForURL('**/coach/pending-verification');\n    });\n\n    test('should validate required certification fields', async ({ page }) => {\n      await page.goto('/become-coach');\n      \n      // Try to submit without required fields\n      await page.click('[data-testid=\"submit-application\"]');\n      \n      // Should show validation errors\n      await expect(page.locator('[data-testid=\"certification-number-error\"]'))\n        .toContainText(/required|enter certification number/i);\n      \n      await expect(page.locator('[data-testid=\"certification-level-error\"]'))\n        .toContainText(/required|select level/i);\n    });\n\n    test('should handle invalid certification number format', async ({ page }) => {\n      await page.goto('/become-coach');\n      \n      await page.fill('[data-testid=\"certification-number\"]', 'INVALID-FORMAT');\n      \n      // Should show format error\n      await expect(page.locator('[data-testid=\"certification-format-error\"]'))\n        .toContainText(/invalid format|ipec certification/i);\n    });\n  });\n\n  test.describe('Role-Based Access Control', () => {\n    test('should restrict coach features for non-coaches', async ({ page }) => {\n      // Login as client\n      await AuthTestHelpers.navigateToLogin(page);\n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page.click('[data-testid=\"login-submit\"]');\n      await AuthTestHelpers.waitForAuthRedirect(page);\n      \n      // Try to access coach-only features\n      await page.goto('/coach/dashboard');\n      \n      // Should redirect or show access denied\n      await expect(page.locator('[data-testid=\"access-denied\"]')).toBeVisible()\n        .or(expect(page).toHaveURL('**/access-denied'))\n        .or(expect(page).toHaveURL('**/dashboard'));\n    });\n\n    test('should show appropriate navigation for user role', async ({ page, context }) => {\n      // This test would need to check navigation elements based on user role\n      await AuthTestHelpers.navigateToLogin(page);\n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page.click('[data-testid=\"login-submit\"]');\n      await AuthTestHelpers.waitForAuthRedirect(page);\n      \n      // Check navigation elements\n      const navigation = page.locator('[data-testid=\"main-navigation\"]');\n      await expect(navigation).toBeVisible();\n      \n      // Client should see client-specific nav items\n      await expect(navigation.locator('[data-testid=\"find-coaches\"]')).toBeVisible();\n      await expect(navigation.locator('[data-testid=\"my-sessions\"]')).toBeVisible();\n      \n      // Should not see coach-specific items\n      await expect(navigation.locator('[data-testid=\"coach-dashboard\"]')).not.toBeVisible();\n    });\n  });\n\n  test.describe('Cross-Device Session Handling', () => {\n    test('should handle login from multiple devices', async ({ browser }) => {\n      // Create two browser contexts to simulate different devices\n      const context1 = await browser.newContext();\n      const context2 = await browser.newContext();\n      \n      const page1 = await context1.newPage();\n      const page2 = await context2.newPage();\n      \n      // Login from first device\n      await AuthTestHelpers.navigateToLogin(page1);\n      await AuthTestHelpers.fillLoginForm(\n        page1, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page1.click('[data-testid=\"login-submit\"]');\n      await AuthTestHelpers.waitForAuthRedirect(page1);\n      \n      // Login from second device\n      await AuthTestHelpers.navigateToLogin(page2);\n      await AuthTestHelpers.fillLoginForm(\n        page2, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page2.click('[data-testid=\"login-submit\"]');\n      await AuthTestHelpers.waitForAuthRedirect(page2);\n      \n      // Both should be logged in\n      await AuthTestHelpers.assertUserIsLoggedIn(page1);\n      await AuthTestHelpers.assertUserIsLoggedIn(page2);\n      \n      await context1.close();\n      await context2.close();\n    });\n  });\n\n  test.describe('Error Recovery', () => {\n    test('should recover from network errors during login', async ({ page }) => {\n      await AuthTestHelpers.navigateToLogin(page);\n      \n      // Mock network failure\n      await page.route('**/auth/v1/token**', route => {\n        route.abort('internetdisconnected');\n      });\n      \n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page.click('[data-testid=\"login-submit\"]');\n      \n      // Should show network error\n      await expect(page.locator('[data-testid=\"network-error\"]'))\n        .toContainText(/network error|connection failed/i);\n      \n      // Remove network mock\n      await page.unroute('**/auth/v1/token**');\n      \n      // Retry login should work\n      await page.click('[data-testid=\"retry-login\"]');\n      await AuthTestHelpers.waitForAuthRedirect(page);\n      await AuthTestHelpers.assertUserIsLoggedIn(page);\n    });\n\n    test('should handle malformed auth responses', async ({ page }) => {\n      await AuthTestHelpers.navigateToLogin(page);\n      \n      // Mock malformed response\n      await page.route('**/auth/v1/token**', route => {\n        route.fulfill({\n          status: 200,\n          body: 'invalid json response'\n        });\n      });\n      \n      await AuthTestHelpers.fillLoginForm(\n        page, \n        TEST_USERS.EXISTING_USER.email, \n        TEST_USERS.EXISTING_USER.password\n      );\n      await page.click('[data-testid=\"login-submit\"]');\n      \n      // Should show error message\n      await expect(page.locator('[data-testid=\"error-message\"]'))\n        .toContainText(/something went wrong|unexpected error/i);\n    });\n  });\n});